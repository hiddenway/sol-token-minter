import fetch from "node-fetch"; // –£—Å—Ç–∞–Ω–æ–≤–∏: npm install node-fetch

const API_KEY = "XDSUUM3RW5S657UI9IAINQTDZHWN87C5MN"; // üîπ –¢–≤–æ–π API-–∫–ª—é—á —Å PolygonScan
const CONTRACT_ADDRESS = "0x9EC7D96636A7406C42fF1ec0AF6E12C39E3A11D0"; // üîπ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
const USDT_CONTRACT = "0xc2132D05D31c914a87C6611C10748AEb04B58e8F"; // USDT (Polygon)

const POLYGONSCAN_API = `https://api.polygonscan.com/api?module=account&action=tokentx&contractaddress=${USDT_CONTRACT}&address=${CONTRACT_ADDRESS}&startblock=0&endblock=99999999&sort=asc&apikey=${API_KEY}`;

async function fetchUSDTTransactions() {
    try {
        const response = await fetch(POLYGONSCAN_API);
        const data = await response.json();

        if (data.status !== "1") {
            console.error("‚ùå –û—à–∏–±–∫–∞ API:", data.message);
            return;
        }

        const transactions = data.result;
        console.log(`üîπ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${transactions.length} USDT-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);

        let incomingTxs = new Map(); // –•—Ä–∞–Ω–∏–º –≤—Å–µ—Ö, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        let outgoingTxs = new Set(); // –•—Ä–∞–Ω–∏–º –≤—Å–µ—Ö, –∫—Ç–æ –ø–æ–ª—É—á–∏–ª USDT –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞

        transactions.forEach(tx => {
            const valueUSDT = parseFloat(tx.value) / 1e6; // USDT —Å —É—á–µ—Ç–æ–º 6 –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤

            if (tx.to.toLowerCase() === CONTRACT_ADDRESS.toLowerCase()) {
                // üí∞ –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç ‚Üí –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                incomingTxs.set(tx.from.toLowerCase(), {
                    from: tx.from,
                    txHash: tx.hash,
                    amount: valueUSDT
                });
            } else if (tx.from.toLowerCase() === CONTRACT_ADDRESS.toLowerCase()) {
                // üí∏ –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚Üí –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                outgoingTxs.add(tx.to.toLowerCase());
            }
        });

        console.log("\nüîé **–ü–æ–∏—Å–∫ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤...**\n");

        let lostFunds = [];
        incomingTxs.forEach(({ from, txHash, amount }) => {
            if (!outgoingTxs.has(from.toLowerCase())) {
                lostFunds.push({ from, txHash, amount });
            }
        });

        if (lostFunds.length === 0) {
            console.log("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–µ–Ω—å–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ!");
        } else {
            console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ ${lostFunds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –≤–µ—Ä–Ω—É–ª–∏ USDT:`);
            lostFunds.forEach(({ from, txHash, amount }, index) => {
                console.log(`üîπ ${index + 1}. –ê–¥—Ä–µ—Å: ${from} | TX: ${txHash} | –°—É–º–º–∞: ${amount} USDT`);
            });
        }

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    }
}

fetchUSDTTransactions();